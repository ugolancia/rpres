t.test(aut, man, paired=FALSE, var.equal = FALSE)
aut<- mtcars$mpg[mtcars$am==0]
man<- mtcars$mpg[mtcars$am==1]
t.test(aut, man, paired=FALSE, var.equal = FALSE)
x<- mtcars$am
y<- mtcars$mpg
fit<- lm(y~x)
plot(x, y)
abline(fit)
summary(fit)
x<- mtcars$am
y<- mtcars$mpg
fit<- lm(y~x)
plot(x, y)
abline(fit)
summary(fit)
plot(x, resid(fit))
abline(h = 0)
x<- mtcars$am
y<- mtcars$mpg
wt<- mtcars$wt
mod_1<- lm(y~x+wt)
summary(mod_1)
require(datasets)
data(swiss)
?swiss
18*50
18*40
720/60
18*45/60
13.5*50
fit<- lm(mtcars$mpg~mtcars$wt)
fit
summary(fit)
fitted(fit)
?scale
sqrt(0.44)
0.44^2
str(mtcars)
model_full<- lm(mpg~ ., data = mtcars)
summary(model_full)
mod_wt<- lm(mpg~wt, data = mtcars)
summary(mod_wt)
mod_wt<- lm(mpg~wt, data = mtcars)
summary(mod_wt)
par(mfrow= c(2, 2))
plot(mod_wt)
?mfrow
?par
mod_wt<- lm(mpg~wt, data = mtcars)
summary(mod_wt)
par(mfrow=c(2, 2))
plot(mod_wt)
mod_wt<- lm(mpg~wt, data = mtcars)
summary(mod_wt)
plot(mod_wt)
mod_wt<- lm(mpg~wt, data = mtcars)
summary(mod_wt)
plot(resid(mod_wt))
plot(wt, mpg, data = mtcars)
with(mtcars, plot(wt, mpg)
)
with(mtcars, plot(wt, mpg))
mod_wt<- lm(mpg~wt, data = mtcars)
summary(mod_wt)
with(mtcars, plot(wt, mpg))
abline(mod_wt)
par(mfrow= c(2,2))
plot(mod_wt)
par(mfrow = c(1, 1))
plot(mod_wt)
mod_wt_am<- lm(mpg~wt+am, data = mtcars)
summary(mod_wt_am)
head(mtcars)
mod_wt_hp<- lm(mpg~wt+hp, data = mtcars)
summary(mod_wt_hp)$coefficient
summary(mod_wt_hp)
mod_wt_hp_am<- lm(mpg~wt+hp+am, data = mtcars)
summary(mod_wt_hp_am)
mod_wt_hp_cyl<- lm(mpg~wt+hp+cyl, data = mtcars)
summary(mod_wt_hp_cyl)$coefficient
summary(mod_wt_hp_cyl)
mod_wt_hp_cyl-am<- lm(mpg~wt+hp+cyl+am, data = mtcars)
summary(mod_wt_hp_cyl_am)$coefficient
summary(mod_wt_hp_cyl_am)
mod_wt_hp_cyl_am<- lm(mpg~wt+hp+cyl+am, data = mtcars)
summary(mod_wt_hp_cyl_am)$coefficient
summary(mod_wt_hp_cyl_am)
fit<- lm(mpg~hp, data = mtcars)
summary(fit)
str(mtcars)
help(mtcars)
mtcars$am<- as.factor(mtcars$am)
mtcars$vs<- as.factor(mtcars$vs)
str(mtcars)
aut<- mtcars$mpg[mtcars$am==0]
man<- mtcars$mpg[mtcars$am==1]
t.test(aut, man, paired=FALSE, var.equal = FALSE)
fit1<- lm(mpg~wt, data = mtcars)
fit2<- update(fit1, mpg~wt+hp, data = mtcars)
fit3<- update(fit1, mpg~wt+hp+am, data=mtcars)
fit4<- update(fit1, mpg~wt+hp+am+cyl, data=mtcars)
fit5<- update(fit1, mpg~wt+hp+am+cyl+disp, data=mtcars)
fit6<- update(fit1, mpg~wt+hp+am+cyl+disp+drat, data=mtcars)
fit7<- update(fit1, mpg~wt+hp+am+cyl+disp+drat+carb, data=mtcars)
anova(fit1, fit2, fit3, fit4, fit5, fit6, fit7)
summary(fit3)
plot(fit3)
y<- mtcars$mpg
x1<- mtacars$cyl
x2<- mtcars$wt
fit<- lm(y~x1+x2)
summary(fit)
y<- mtcars$mpg
x1<- mtcars$cyl
x2<- mtcars$wt
fit<- lm(y~x1+x2)
summary(fit)
mtcars$cyl
str(mtcars)
y<- mtcars$mpg
x1<- as.factor(mtcars$cyl)
x2<- mtcars$wt
fit<- lm(y~x1+x2)
summary(fit)
x1
fit1<- lm(y~x1)
summary(fit1)
summary(fit)
mtcars$cyl
str(mtcars)
y<- mtcars$mpg
x1<- as.factor(mtcars$cyl)
x2<- mtcars$wt
x3<-x1*x2
fit2<- lm(y~x1+x2+x3)
summary(fit2)
x1*x2
x2_cent<- x2-mean(x2)
x1*x2_cent
mtcars$cyl*x2_cent
x3<- x1:x2
x3<- x1/x2
x3<- factor(mtcars$cyl)/x2
lm(mpg~factor(cyl)*wt, data = mtcars)
fit2<- lm(mpg~factor(cyl)*wt, data = mtcars)
fit3<- lm(mpg~factor(cyl)+wt+factor(cyl):wt, data= mtcars)
summary(fit2)$coefficient
summary(fit3)$coefficient
summary(fit)$coefficient
fit3<- lm(mpg~factor(cyl), data= mtcars)
fit4<- update(fi3, mpg~factor(cyl)+wt+factor(cyl):wt, data= mtcars)
anova(fit3, fit4)
fit3<- lm(mpg~factor(cyl), data= mtcars)
fit4<- update(fit3, mpg~factor(cyl)+wt+factor(cyl):wt, data= mtcars)
anova(fit3, fit4)
?influence.point
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<- lm(y~x)
hatvalues(fit)
dfbetas(fit)[5]
dfbetas(fit)
dfbetas(fit)[10]
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit3)$coefficient
summary(fit)$coefficient
fit2<- lm(mpg~factor(cyl)*wt, data = mtcars)
fit3<- lm(mpg~factor(cyl)+wt+factor(cyl):wt, data= mtcars)
summary(fit2)$coefficient
summary(fit3)$coefficient
fit3<- lm(mpg~factor(cyl), data= mtcars)
fit4<- update(fit3, mpg~factor(cyl)+wt+factor(cyl):wt, data= mtcars)
anova(fit3, fit4)
dfbeta
anova(fit2, fit3)
help(mtcars)
head(mtcars)
str(mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
model_1<- lm(mpg~factor(cyl)+wt, data= mtcars)
model_2<- lm(mpg~factor(cyl)+ wt+factor(cyl):wt)
anova(model_1, model_2)
model_1<- lm(mpg~factor(cyl)+wt, data= mtcars)
model_2<- lm(mpg~factor(cyl)+ wt+factor(cyl):wt, data = mtcars)
anova(model_1, model_2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ wt + factor(cyl), data = mtcars)
lm(mpg~wt, data = mtcars)
lm(mpg~wt+factor(cyl), data = mtcars)
library(swirl)
swirl()
22/25
install.packages("QuantPsyc")
library(QuantPsyc)
?scale
library(swirl)
swirl()
250/12
250/12x<-
x<- 250/12
x/25
swirl()
ravenData
mdl<- glm(ravenWinNum ~ RavenScore, family = binomial, data = RavenData)
mdl<- glm(ravenWinNum ~ ravenScore, family = binomial, data = ravenData)
lodds<- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
?"matrix"
?traspose
?transpose
library(swirl)
swirl()
var(1000, 50)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits$date)
as.integer(head(hits[, "date"]))
mdl<- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, "date"))
which.max(hits[, "date"])
which.max(hits[, "visits"])
hits[704,]
lambda<- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2<- glm(visits~date, offset=log(visits+1), poisson, data=hits)
mdl2<- glm(simplystats~date, family = poisson, data = hits, offset=log(visits+1))
qpois(.95, mdl2Â£fitted.values[704])
qpois(.95, mdl2$fitted.values[704])
library(MASS)
?shuttle
x<- glm(auto~wind, family=binomial, data=shuttle)
head(shuttle)
str(shuttle)
x<- glm(use~wind, family=binomial, data=shuttle)
summary(x)
x
str(x)
x$wind
x$windtail
x$coefficients
exp(x$coefficients[2])
x<- glm(use~wind+magn, family=binomial, data=shuttle)
summary(x)
x$coefficients
exp(x$coefficients[2])
x<- glm((use~wind, family=binomial, data=shuttle, -1)
x<- glm((use[-1]~wind, family=binomial, data=shuttle)
x<- glm((1-use~wind, family=binomial, data=shuttle)
head(shuttle)
shuttle$use<- as.numeric(shuttle$use)
head(shuttle)
x<- glm(use~wind, family=binomial, data=shuttle)
summary(x)
x<- glm(use~wind, family=binomial, data=shuttle)
shuttle$use<- as.factor(shuttle$use)
x<- glm(use~wind, family=binomial, data=shuttle)
summary(x)
head(shuttle)
str(shuttle)
shuttle$use<- as.numeric(shuttle$use=="auto")
shuttle
library(MASS)
?shuttle
head(shuttle)
shuttle$use<- as.numeric(shuttle$use=="auto")
head(shuttle)
tail(shuttle)
x<- glm(use~wind, family=binomial, data=shuttle)
summary(x)
exp(x$coefficients[2])
exp(x$coefficients[1])
x$coefficients
1/exp(x$coefficients[2])
x<- glm(use~wind+magn, family=binomial, data=shuttle)
summary(x)
shuttle
x<- glm(use~wind+magn, family=binomial, data=shuttle)
summary(x)
x$coefficients
1/exp(x$coefficients[2])
x<- glm((1-use~wind, family=binomial, data=shuttle)
x<- glm(1-use~wind, family=binomial, data=shuttle)
summary(x)
head(InsectSprays)
fit<- glm(count~spray, family=poisson)
fit<- glm(count~spray, family=poisson, data = InsectSprays)
summary(fit)
fit$coefficients
1/exp(fit$coefficients[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(xMat, yhat, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot)^2)
xMat <- cbind(1, x, x^2, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(xMat, yhat, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
curve(1 + 1*x)
?offset
all.model <- lm(mpg ~ ., data = mtcars)
best.model <- step(all.model, direction = "backward") summary(best.model)
best.model <- step(all.model, direction = "backward")
summary(best.model)
?step
library(swirl)
swirl()
ones<- rep(1, nrow(galton))
lm(child~ones + parent -1, galton)
lm(child~parent, galton)
lm(child~1, galton)
head(trees)
fit<- lm(Volume~Girth + Heigth + Constant -1, trees)
fit<- lm(Volume~Girth + Height + Constant -1, trees)
trees2<- eliminate("Girth", trees)
head(trees2)
fit2<- lm(Volume~Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all<- lm(Fertility~ ., data = swiss)
summary(all)
lm(Fertility~Agriculture, data = swiss)
summary(lm(Fertility~Agriculture, data = swiss))
cor(Examination, Education, data = swiss)
?cor
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms <- function(){
# Store the coefficient of linear models with different independent variables
cf <- c(coef(lm(Fertility ~ Agriculture, swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination,swiss))[2],
coef(lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality, swiss))[2])
print(cf)
}
makelms()
ec<- swiss$Examination + swiss$Catholic
efit<- lm(Fertility~ . + ec, swiss)
all$coefficients - efit$coefficients
plot(Petal.Width, Petal.Length, iris)
plot(Petal.Widht, Petal.Length, iris)
head(iris)
plot(iris$Petal.Width, iris$Petal.Length)
plot( iris$Petal.Length~iris$Petal.Width)
install.packages("caret")
library(caret)
iristrain<- createDataPartition(y = iris$Species, p=0.60, list=FALSE)
training<- iris[iristrain,]
test<- iris[-iristrain, ]
head(test)
tail(tes)
tail(test)
head(training)
151-126
133-94
?predict
n<- nrow(iris)
shuffled<- df[sample(n), ]
str(mtcars)
n<- nrow(mtcars)
shuffled<- df[sample(n), ]
n<- nrow(mtcars)
shuffled<- mtcars[sample(n), ]
head(mtcars)
head(shuffled)
n1<- nrow(iris)
shuffled1<- iris[sample(n), ]
head(shuffled1)
n<- nrow(mtcars)
shuffled<- mtcars[sample(n), ]
train_indices<- 1:round(0.7*n)
train<- shuffled[train_indices, ]
n<- nrow(mtcars)
shuffled<- mtcars[sample(n), ]
train_indices<- 1:round(0.7*n)
train<- shuffled[train_indices, ]
test_indices<- round(0.7*n+1):n
test<- shuffled[test_indices, ]
test
n1<- nrow(iris)
shuffled1<- iris[sample(n), ]
train_indices<- 1:round(0.7*n)
train1<- shuffled1[train_indices, ]
test_indices<- (round(0.7*n+1)):n
test1<- shuffled1[test_indices, ]
test1
train
train1
dim(irs)
dim(iris)
n1<- nrow(iris)
shuffled1<- iris[sample(n1), ]
train_indices<- 1:round(0.7*n1)
train1<- shuffled1[train_indices, ]
test_indices<- (round(0.7*n1+1)):n
test1<- shuffled1[test_indices, ]
test1
test_indices<- (round(0.7*n1+1)):n1
test1<- shuffled1[test_indices, ]
27+24.10+93.70
x<- rep(4.9, 20)
y<- rep(5, 16)
z<- x+y
z<- paste(x, y)
z<- c(x, y)
mean(z)
sd(z)
mean(z)+sd(z)
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
install.packages("shiny")
install.packages("rpart")
install.packages("rattle")
install.packages("rpar.plot")
install.packages("rpart.plot")
install.packages("RColorBrewer")
shinyapps::setAccountInfo(name='ugolancia', token='B06D78E2A56A8431DA14C0A5E21AC44C', secret='3qwj26Kj3aKBPASecSZepXhFLWhzIKgX48uXYtOm')
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
head(Exports)
install.packages("ggvis")
library(ggvis)
head(Exports)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, steps = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, slider = s(0, 2, step=0.1))
manipulate(myPlot, s = slider(0, 2, step=0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step=0.1))
manipulate(myPlot(s), s = slider(0, 2, step=0.1))
(0.99*0.001)/((0.99*0.01)+(0.99*0.999))
(0.99*0.001)/((0.99*0.001)+(0.99*0.999))
0.99*0.001
x<- 99*0.1
y<- 99*99.9%
x/(x+y)
x<- 99*0.1
y<- 99*99.9
x/(x+y)
x
y
x<- 99*0.1
y<- 1*99.9
x/(x+y)
x<- 0.99*0.001
y<- 0.01*0.999
x/(x+y)
x<- 0.99*0.01
y<- 0.01*0.99
x/(x+y)
9900*0.99
9900-9801
shiny::runApp('Desktop/Data_Science_Specialization/Data_Products/BMI')
setwd("~/Desktop/Data_Science_Specialization/Data_Products/Rpresent")
getwd()
